x = levels(factor(school$PCBG04))
x
cc = gsub("or less", "oder weniger",gsub("to", "bis", gsub("More than", "Mehr als", x)))
levels(school$PCBG04) = cc
cc = gsub("or less", "oder weniger",gsub("to", "bis", gsub("More than", "Mehr als", y)))
levels(school$PCBG04) = cc
levels(school$PCBG04)
colnames(school)
school$PCBG07A
table(school$PCBG07A)
?table
table(school$PCBG07A, useNA = TRUE)
table(school$PCBG07A, useNA = "always")
table(sapply(school,class))
table(sapply(student,class))
table(sapply(teach,class))
school
sapply(school,unclass)
class(sapply(school,unclass))
sapply(sapply(school,unclass),class)
length(sapply(sapply(school,unclass),class))
apply(sapply(school,unclass),2,class)
apply(sapply(c(school,student,teach),unclass),2,class)
apply(sapply(school,unclass),2,class)
apply(sapply(teach,unclass),2,class)
apply(sapply(teach,unclass),2,class)
apply(sapply(student,unclass),2,class)
apply(sapply(school,unclass),2,class)
apply(sapply(school,unclass),2,class)
school
as.matrix(school)
apply(as.matrix(school),2,class)
school
apply(school,2,class)
school["PCBG06A"]
class(school["PCBG06A"])
mode(school["PCBG06A"])
mode(unlist(school["PCBG06A"]))
apply(school,2,class)
apply(sapply(school,unclass),2,class)
as.matrix(school)
apply(as.matrix(school),2,class)
apply(as.matrix(school),2,as.numeric)
school["PCBG06A"]
is.numeric(school["PCBG06A"])
factor(school["PCBG06A"])
unlcass(school["PCBG06A"])
levels(school["PCBG06A"])
class(school["PCBG06A"])
mode(school["PCBG06A"])
unlist(school["PCBG06A"])
mode(unlist(school["PCBG06A"]))
apply(as.matrix(school),2,as.numeric)
apply(as.matrix(school),2,as.numeric) != NA
apply(apply(as.matrix(school),2,as.numeric),2,is.na)
apply(as.matrix(school),2,as.numeric)[apply(apply(as.matrix(school),2,as.numeric),2,is.na)]
apply(as.matrix(school),2,as.numeric)[!apply(apply(as.matrix(school),2,as.numeric),2,is.na)]
apply(as.matrix(school),2,as.numeric)[!apply(apply(as.matrix(school),1,as.numeric),1,is.na)]
x = levels(school$PCBG04)[school$PCBG04]
apply(apply(as.matrix(school),2,as.numeric),2,is.na)
apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max)
apply(as.matrix(school),2,as.numeric)[apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max)]
apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max)
as.bool(apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max))
apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max) == 1
mat[apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max) == 1]
mat = apply(as.matrix(school),2,as.numeric)
mat = apply(as.matrix(school),2,as.numeric)
mat[apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max) == 1]
colnames(apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max) == 1)
mode(apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max) == 1)
apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max) == 1
class(apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max) == 1)
unlist(apply(apply(apply(as.matrix(school),2,as.numeric),2,is.na),2,max) == 1)
mat = apply(as.matrix(school),2,as.numeric)
mat
mat = apply(as.matrix(school),2,as.numeric, rm.na = TRUE)
mat
mode(mat)
as.matrix(mat)
as.matrix(mat)[1]
as.matrix(mat)[:,1]
as.matrix(mat)[1:2]
(apply(apply(mat,2,is.na),2,max) == 1)
mat
apply(mat,2,is.na)
!apply(mat,2,is.na)
apply(mat,2,is.na)
!apply(mat,2,is.na)
mat
(apply(!apply(mat,2,is.na),2,max) == 1)
mat
mat
!apply(mat,2,is.na)
(apsply(!apply(mat,2,is.na),2,max) == 1)
(apply(!apply(mat,2,is.na),2,max) == 1)
(apply(!apply(mat,2,is.na),2,max) == 1)[1]
factors(apply(!apply(mat,2,is.na),2,max) == 1)
factor(apply(!apply(mat,2,is.na),2,max) == 1)
labels(apply(!apply(mat,2,is.na),2,max) == 1)
levels(apply(!apply(mat,2,is.na),2,max) == 1)
(apply(!apply(mat,2,is.na),2,max) == 1)
(apply(!apply(mat,2,is.na),2,max) == 1)[2]
untable(apply(!apply(mat,2,is.na),2,max) == 1)
values(apply(!apply(mat,2,is.na),2,max) == 1)
(apply(!apply(mat,2,is.na),2,max) == 1)
mat
(apply(!apply(mat,2,is.na),2,max) == 1)
mode(apply(!apply(mat,2,is.na),2,max) == 1)
mat[mode(apply(!apply(mat,2,is.na),2,max) == 1)]
mat[mode(apply(!apply(mat,2,is.na),2,max) == 1)]
mat[apply(!apply(mat,2,is.na),2,max) == 1)]
mat[(apply(!apply(mat,2,is.na),2,max) == 1)]
as.vector(apply(!apply(mat,2,is.na),2,max) == 1)
mat[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]
school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]
table(school$PCBG07A, useNA = "always")
breaks = c(0, 160, 220, 260, 300)
labels = c("selten", "durchschnittlich", "oft", "sehr oft")
kategorien = cut(as.numeric(as.character(school$PCBG07A)), breaks = breaks, labels = labels, ordered = TRUE)
school$PCBG07AA = kategorien
school1<- na.omit(school)
school1 = na.omit(school)
school1
school1 = na.omit(school)
school1
open = school1$PCBG07C
table(unclass(open))
school1 = na.omit(school)
school1
open = school1$PCBG07C
table(unclass(open))
school1$PCBG07C
school1$PCBG07C
school1$PCBG07C
mode(school1$PCBG07C)
as.vector(school1$PCBG07C)
school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]
mat = apply(as.matrix(school),2,as.numeric)
school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]
breaks = c(0, 160, 220, 260, 300)
labels = c("selten", "durchschnittlich", "oft", "sehr oft")
kategorien = cut(as.numeric(as.character(school$PCBG07A)), breaks = breaks, labels = labels, ordered = TRUE)
school$PCBG07AA = kategorien
school$PCBG07AA
school_ = na.omit(school)
as.vector(school_$PCBG07C)
days_per_week_open = as.vector(school_$PCBG07C)
school_ = na.omit(school)
days_per_week_open = school_$PCBG07C
size_of_the_school = school_$PCBG05A
kreuztabelle = table(days_per_week_open, size_of_the_school)
kreuztabelle
kreuztabelle
addmargins(kreuztabelle)
prop.table(kreuztabelle)
addmargins(prop.table(kreuztabelle))
addmargins(prop.table(kreuztabelle))[:,4]
addmargins(prop.table(kreuztabelle))[4]
as.data.frame(addmargins(prop.table(kreuztabelle)))
as.matrix(addmargins(prop.table(kreuztabelle)))
as.matrix(addmargins(prop.table(kreuztabelle)))[4]
as.matrix(addmargins(prop.table(kreuztabelle)))["Sum"]
prop.table(kreuztabelle))
prop.table(kreuztabelle)
which(sapply(teach, is.numeric))
sapply(teach, is.numeric)
which(sapply(teach, is.numeric))
teach["PTBG12"]
length(teach["PTBG12"])
mod(teach["PTBG12"])
mode(teach["PTBG12"])
length(unlist((teach["PTBG12"])))
teach_ = na.omit(teach)
physics_per_week <- teach_$PTBP16     #numerische Variable
age <- teach_$PTBG03
physics_per_week = teach_$PTBP16
age = teach_$PTBG03
table(teach.physics, teach.age)
table(physics, age)
table(physics_per_week, age)
mean_ = tapply(physics_per_week, age, FUN = mean)
mean_ = tapply(physics_per_week, age, FUN = mean)
mean_
physics_min_per_week = teach_$PTBP16
age = teach_$PTBG03
table(physics_min_per_week, age)
mean_ = tapply(physics_per_week, age, FUN = mean)
mean_
n = tapply(physics_min_per_week, age, FUN = length)
se = sd_/sqrt(n)
sd_ = tapply(physics_min_per_week, age, FUN = sd)
n = tapply(physics_min_per_week, age, FUN = length)
se = sd_/sqrt(n)
se
stat_ = as.data.frame(cbind(mean_, se))
stat_
physics_min_per_week_prep = teach_$PTBP17
age = teach_$PTBG03
table(physics_min_per_week_prep, age)
mean_ = tapply(physics_min_per_week_prep, age, FUN = mean)
sd_ = tapply(physics_min_per_week_prep, age, FUN = sd)
n = tapply(physics_min_per_week_prep, age, FUN = length)
se = sd_/sqrt(n)
stat_ = as.data.frame(cbind(mean_, se))
stat_
num_of_books = school_$PCBG08BB
kreuztabelle = table(days_per_week_open, num_of_books)
prop.table(kreuztabelle)
num_of_books = school_$PCBG08BB
size_of_the_school = school_$PCBG05A
kreuztabelle = table(num_of_books, size_of_the_school)
prop.table(kreuztabelle)
prop.table(kreuztabelle)
prop.table(kreuztabelle)
kreuztabelle = table(size_of_the_school, num_of_books, )
kreuztabelle = table(size_of_the_school, num_of_books)
prop.table(kreuztabelle)
area_type = school_$PCBG05B
size_of_the_school = school_$PCBG05A
kreuztabelle = table(size_of_the_school, area_type)
prop.table(kreuztabelle)
kreuztabelle
addmargins(kreuztabelle)
prop.table(addmargins(kreuztabelle))
prop.table(addmargins(kreuztabelle))
school_ = na.omit(school)
days_per_week_open = school_$PCBG07C
size_of_the_school = school_$PCBG05A
kreuztabelle = table(days_per_week_open, size_of_the_school)
prop.table(kreuztabelle)
addmargins(prop.table(kreuztabelle))
teach_ = na.omit(teach)
physics_min_per_week = teach_$PTBP16
age = teach_$PTBG03
table(physics_min_per_week, age)
mean_ = tapply(physics_min_per_week, age, FUN = mean)
sd_ = tapply(physics_min_per_week, age, FUN = sd)
n = tapply(physics_min_per_week, age, FUN = length)
se = sd_/sqrt(n)
stat_ = as.data.frame(cbind(mean_, se))
deskriptiv <- as.data.frame(deskriptiv)
stat_
physics_min_per_week_prep = teach_$PTBP17
age = teach_$PTBG03
table(physics_min_per_week_prep, age)
mean_ = tapply(physics_min_per_week, age, FUN = mean)
sd_ = tapply(physics_min_per_week, age, FUN = sd)
teach_ = na.omit(teach)
physics_min_per_week_prep = teach_$PTBP17
age = teach_$PTBG03
table(physics_min_per_week_prep, age)
mean_ = tapply(physics_min_per_week_prep, age, FUN = mean)
sd_ = tapply(physics_min_per_week_prep, age, FUN = sd)
n = tapply(physics_min_per_week_prep, age, FUN = length)
se = sd_/sqrt(n)
stat_ = as.data.frame(cbind(mean_, se))
stat_
addmargins(prop.table(kreuztabelle))
addmargins(prop.table(kreuztabelle))[1]
dims(addmargins(prop.table(kreuztabelle)))
dim(addmargins(prop.table(kreuztabelle)))
addmargins(prop.table(kreuztabelle))[1,8]
addmargins(prop.table(kreuztabelle))[1:7,8]
zeilen_per = as.vector(addmargins(prop.table(kreuztabelle))[1:7,8])
zeilen_per
spa_per = as.vector(addmargins(prop.table(kreuztabelle))[7,1:8])
spa_per
kreuztabelle = table(days_per_week_open, size_of_the_school)
kreuztabelle
cbid(kreuztabelle,zeilen_per)
cbind(kreuztabelle,zeilen_per)
rbind(kreuztabelle,spa_per)
kr_tab = cbind(kreuztabelle,zeilen_per)
rbind(kr_tab,spa_per)
kr_tab
kreuztabelle = table(days_per_week_open, size_of_the_school)
zeilen_per = as.vector(addmargins(prop.table(kreuztabelle))[1:7,8])
spa_per = as.vector(addmargins(prop.table(kreuztabelle))[7,1:8])
kr_tab = cbind(kreuztabelle,zeilen_per)
kr_tab = rbind(kr_tab,spa_per)
kr_tab
age      # kategorielle Variable, bool vektor wird gebraucht um die richtigen
as.numeric(age)
kat2 <- as.numeric(age) == 2
age      # kategorielle Variable, bool vektor wird gebraucht um die richtigen
?as.numeric
as.numeric(40-49)
kat2 <- as.numeric(age) == 2
kat5 <- as.numeric(age) == 5
teach.physics   #numerische Variable
num2 <- na.omit(physics_min_per_week_prep[kat2])
num5 <- na.omit(physics_min_per_week_prep[kat5])
t.test(num2, num5)
kat2 <- as.numeric(age) == 1
kat5 <- as.numeric(age) == 2
kat2
sum(kat2)
kat2 <- as.numeric(age) == 2
sum(kat2)
kat2 <- as.numeric(age) == 3
sum(kat2)
mode(age)
age
as.numeric(34-40)
as.numeric(34-)
as.numeric("34-45")
as.numeric("34-45")
levels(age)
sapply(age,levels)
table(age)
kat2 <- as.numeric(age) == 2
sum(kat2)
kat5 <- as.numeric(age) == 5
sum(kat5)
table(age)[2]
kat2 <- as.numeric(age) == 2
kat2
age
age %in% table(age)[2]
sum(age %in% table(age)[2])
sum(age %in% table(age)[3])
sum(table(age)[3] %in% age)
sum(levels(age)[2] %in% age)
sum(levels(age)[3] %in% age)
sum(age %in% levels(age)[3] )
sum(age %in% levels(age)[2])
prop.table(kreuztabelle)
addmargins(kreuztabelle)
2/106
prop.table(kreuztabelle)
kr_tab
prop.table(kreuztabelle)
addmargins(prop.table(kreuztabelle)
addmargins(prop.table(kreuztabelle))
addmargins(prop.table(kreuztabelle))
school1 = na.omit(school)
school1
as.vector(school1$PCBG07C)
school.pop <- school1$PCBG05A
school.pop
kreuztabelle <- table(open, pop)
prop.table <- prop.table(table(school.open, school.pop)) * 100   #Totalprozent
Spaltensummen <- 100 * prop.table(kreuztabelle, 2)       #Spaltensummen
school.pop <- school1$PCBG05A
school.pop
kreuztabelle <- table(open, pop)
prop.table <- prop.table(table(school.open, school.pop)) * 100   #Totalprozent
pop <- school1$PCBG05A
school.pop
kreuztabelle <- table(open, pop)
prop.table <- prop.table(table(school.open, school.pop)) * 100   #Totalprozent
Spaltensummen <- 100 * prop.table(kreuztabelle, 2)       #Spaltensummen
Zeilensummen  <- 100 * prop.table(kreuztabelle, 1)       #Zeilensummen
prop.table(kreuztabelle, 2)
Spaltensummen <- 100 * prop.table(kreuztabelle, 2)       #Spaltensummen
Zeilensummen  <- 100 * prop.table(kreuztabelle, 1)       #Zeilensummen
colSums(prop.table)
rowSums(prop.table)
rbind(Spaltensummen, Anteil.Bewohner = colSums(prop.table))
cbind(Zeilensummen, Anteil.offene.Tage = rowSums(prop.table))
school_ = na.omit(school)
days_per_week_open = school_$PCBG07C
size_of_the_school = school_$PCBG05A
kreuztabelle = table(days_per_week_open, size_of_the_school)
addmargins(prop.table(kreuztabelle))
prop.table(kreuztabelle, 2)
prop.table(kreuztabelle, 1)
prop.table(kreuztabelle, 2) #Spaltenprozent
kreuztabelle = table(days_per_week_open, size_of_the_school)
physics_min_per_week_prep
age
length(age)
length(physics_min_per_week_prep)
cat1 <- na.omit(physics_min_per_week_prep[age %in% levels(age)[2]])
cat2 <- na.omit(physics_min_per_week_prep[age %in% levels(age)[3]])
t.test(cat1, cat2)
ls(school)
school.neu.bool <- gregexpr("PCBG[0-9]+", ls(school)) > 0   # alle Fragen ausw?hlen, wo PCBG vorkommt
school.neu <- ls(school)[school.neu.bool]       # diese Fragen in eine neue Variable einsetzen
school.neu
IDSCHOOL <- school.neu
IDSCHOOL
IDSCHOOL <- sub("PCBG", "F", IDSCHOOL)          #Ersetzen von PCBG durch F in neuer Variable
IDSCHOOL
IDSCHOOL
num.teach <- sapply(teach, is.numeric)         #numerische Variablen ruassuchen
aggregate(teach[num.teach], list(teach$PTBG02), mean)     #Durchschnittswerte f?r M?nnder und Frauen
teach.datensatz <- aggregate(teach[num.teach], list(teach$IDSCHOOL), mean)   #Durchschnittswerte auf Schulebene
aggregate(teach[num.teach], list(teach$PTBG02), mean)     #Durchschnittswerte f?r M?nnder und Frauen
fragebogen = school[grepl("^PCBG", colnames(school))]
IDSCHOOL = school[grepl("^PCBG", colnames(school))]
IDSCHOOL
colnames(IDSCHOOL)
IDSCHOOL = school[grepl("^PCBG", colnames(school))]
colnames(IDSCHOOL) = gsub("^PCBG", "F", colnames(IDSCHOOL))
IDSCHOOL
aggregate(teach[sapply(teach, is.numeric)], list(teach$PTBG02), mean)
aggregate(teach[sapply(teach, is.numeric)], list(teach$PTBG02), mean)
aggregate(teach[sapply(teach, is.numeric)], list(teach$IDSCHOOL), mean)
aggregate(teach[sapply(teach, is.numeric)], list(teach$PTBG02), sum)
aggregate(teach[sapply(teach, is.numeric)], list(teach$IDSCHOOL), sum)
aggregate(teach[sapply(teach, is.numeric)], list(teach$PTBG02), sum)
names(data_)
data_ = aggregate(teach[sapply(teach, is.numeric)], list(teach$IDSCHOOL), sum)
names(data_)
data_
names(data_)[1] = "IDSCHOOL"
data_
str(data_)
merge(data_, school, by = "IDSCHOOL")
str(data_)
nrow(data_)
nrow(school)
nrow(school) == nrow(data_)
merge(data_, school, by = "IDSCHOOL")
student$PSBG01
student$PSBP15
aggregate(cbind(student$PSBG01,student$PSBP15),list(student$IDSCHOOL), sum, na.rm = TRUE)
geschlecht <- student$PSBG01 == "Male"            #boolvariable f?r Geschlecht
physiklernen <- as.numeric(as.character(student$PSBP15))    #Rechnen mit den labels als Zahlen,
x <- cbind(geschlecht, physiklernen)
x
geschlecht = student$PSBG01
geschlecht
physic_hours = student$PSBP15
physic_lernen = student$PSBP15
physic_lernen
physic_lernen = as.numeric(as.character(student$PSBP15))
geschlecht = student$PSBG01
physic_lernen
aggregate(cbind(geschlecht,physic_lernen),list(student$IDSCHOOL), sum, na.rm = TRUE)
geschlecht = student$PSBG01 == "Male"
physic_lernen = as.numeric(as.character(student$PSBP15))
aggregate(cbind(geschlecht,physic_lernen),list(student$IDSCHOOL), sum, na.rm = TRUE)
aggregate(x, by = list(student$IDSCHOOL), mean, na.rm = TRUE)       #aggregieren auf Schulebene
aggregate(x, by = list(student$IDSCHOOL), sum, na.rm = TRUE)       #aggregieren auf Schulebene
geschlecht <- student$PSBG01           #boolvariable f?r Geschlecht
x <- cbind(geschlecht, physiklernen)
aggregate(x, by = list(student$IDSCHOOL), sum, na.rm = TRUE)       #aggregieren auf Schulebene
geschlecht = student$PSBG01 == "Male"
physic_lernen = as.numeric(as.character(student$PSBP15))
physic_lernen
aggregate(cbind(geschlecht,physic_lernen),list(student$IDSCHOOL), sum, na.rm = TRUE)
aggregate(cbind(geschlecht,physic_lernen),list(student$IDCLASS), mean, na.rm = TRUE)
aggregate(x, by = list(student$IDCLASS), mean, na.rm = TRUE)
aggregate(cbind(geschlecht,physic_lernen),list(student$IDCLASS), mean, na.rm = TRUE)
aggregate(cbind(geschlecht,physic_lernen),list(student$IDCLASS), sum, na.rm = TRUE)
ls(school)
ls(student)
merge(school, student, by = "IDSCHOOL")
merge(school, student, by = "IDSCHOOL")
intersect(list(school),list(student))
intersect(ls(school),ls(student))
breaks = c(0, 150, 200, 250, 300)
labels = c("selten", "durchschnittlich", "oft", "sehr oft")
kategorien = cut(as.numeric(as.character(school$PCBG07A)), breaks = breaks, labels = labels, ordered = TRUE)
school$PCBG07AA = kategorien
kategorien
school$PCBG07AA
mat = apply(as.matrix(school),2,as.numeric)
school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]
mat = apply(as.list(school),2,as.numeric)
mode(school)
lapply(school,is.numeric)
as.matrix(school)
mat = apply(as.matrix(school),2,as.numeric)
mat = apply(as.matrix(school),2,as.numeric)
mat
as.list(mat)
mat = apply(as.matrix(school),2,as.numeric)
school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]
as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)])
lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),is.numeric)
apply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),is.numeric)
unclass(school$PCBG06A) #Es gibt weniger Auspr?gungen als anzahl der Antworten
num.school <- as.data.frame(school$PCBG06A)
num.school$PCBG06B <- school$PCBG06B
num.school$PCBG07A <- school$PCBG07A
num.school$PCBG07B <- school$PCBG07B
str(num.school)     #alle 4 Variablen sind Faktoren
num.school
unclass(num.school)
lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),as.character)
lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),function(x) as.character(x))
lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),function(x) as.numeric(as.character(x)))
lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),function(x) as.numeric(as.character(x)), na.rm = TRUE)
lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),function(x) as.numeric(as.character(x), na.rm =TRUE))
lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),function(x) as.numeric(as.character(x), na.rm =TRUE))
x = levels(school$PCBG04)[school$PCBG04]
change = gsub("or less", "oder weniger",gsub("to", "bis", gsub("More than", "Mehr als", x)))
lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),function(x) as.numeric(as.character(x), na.rm =TRUE))
lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),function(x) as.numeric(as.character(x)))
lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),function(x) as.character(x))
lapply(lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),function(x) as.numeric(as.character(x))),is.numeric)
lapply(lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),function(x) as.numeric(as.character(x))),is.numeric)
load("school.RDATA")
load("student.RDATA")
load("teach.RDATA")
length(school)
min(c(class(school),class(student),class(teach)) == "data.frame") == TRUE
table(sapply(school,class))
table(sapply(student,class))
table(sapply(teach,class))
apply(sapply(school,unclass),2,class)
apply(sapply(student,unclass),2,class)
apply(sapply(teach,unclass),2,class)
sapply(sapply(fragebogen,unique),length)
mat = apply(as.matrix(school),2,as.numeric)
mat = apply(as.matrix(school),2,as.numeric)
lapply(lapply(as.data.frame(school[as.vector(apply(!apply(mat,2,is.na),2,max) == 1)]),function(x) as.numeric(as.character(x))),is.numeric)
intersect(ls(school),ls(student))
