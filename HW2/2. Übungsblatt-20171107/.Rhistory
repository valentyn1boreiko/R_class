sort(ja_anteil)
conf_int[975]
quantile(ja_anteil, probs=0.975)
conf_int[975]
quantile(ja_anteil, probs=0.975)
quantile(ja_anteil, probs=0.025)  # quantile mit Wahrscheinlichkeit 0.025.
untere_g
rowMeans(untere_g)
mean(untere_g)
mean(obere_g)
quantile(ja_anteil, probs=0.975)
quantile(ja_anteil, probs=0.025)  # quantile mit Wahrscheinlichkeit 0.025.
ja_anteil = rowMeans(matr)
ja_anteil
ja_anteil = rowMeans(matr)
ja_anteil = rowMeans(matr)
ja_anteil
ja_anteil
ja_anteil
length(ja_anteil)
alpha = 0.05
n = 1000
sch = ja_anteil/n
q_n = qnorm(1 - (alpha/2))
sd = sqrt(sch*(1-sch))
untere_g = sch - q_n * sd/sqrt(n)
obere_g = sch + q_n * sd/sqrt(n)
conf_int = paste(untere_g,obere_g,sep = ",")
conf_int[975]
conf_int = paste(untere_g,obere_g,sep = ",")
conf_int
sch = ja_anteil
q_n = qnorm(1 - (alpha/2))
sd = sqrt(sch*(1-sch))
untere_g = sch - q_n * sd/sqrt(n)
obere_g = sch + q_n * sd/sqrt(n)
alpha = 0.05
n = 1000
sch = ja_anteil
q_n = qnorm(1 - (alpha/2))
sd = sqrt(sch*(1-sch))
untere_g = sch - q_n * sd/sqrt(n)
obere_g = sch + q_n * sd/sqrt(n)
conf_int = paste(untere_g,obere_g,sep = ",")
conf_int[975]
conf_int[25]  # Konfidenzintervalle von 25-te Umfrage.
conf_int[500]  # Konfidenzintervalle von 25-te Umfrage.
alpha = 0.05
n = 1000
sch = ja_anteil
q_n = qnorm(1 - (alpha/2))
sd = sqrt(sch*(1-sch))
untere_g = sch - q_n * sd/sqrt(n)
obere_g = sch + q_n * sd/sqrt(n)
conf_int = paste(untere_g,obere_g,sep = ",")
conf_int[975]
quantile(ja_anteil, probs=0.975)
conf_int[25]
quantile(ja_anteil, probs=0.025)
conf_int[975]
quantile(ja_anteil, probs=0.975)
conf_int[25]
quantile(ja_anteil, probs=0.025)
n_e_u <-names(ja_anteil) # Nehmen die namen von jeder Erwartungswert
neu <-names(ja_anteil) # Nehmen die namen von jeder Erwartungswert
neu
row_names <-names(ja_anteil)
row_names <-names(ja_anteil)
length(row_names)
row_names <-names(matr)
length(row_names)
row_names_num = sub("Zeile", replace= "",  row_names) # Nehmen Zeile weg
row_names_num
row_names <-names(ja_anteil)
row_names_num = sub("Zeile", replace= "",  row_names) # Nehmen Zeile weg
row_names_num
row_nums
row_nums = (as.numeric(row_names_num))
row_nums
row_nums_sort = paste0("Zeile", sort(num_g), sep="")  # Sortiert wieder mit zeilen zusammenstellen.
row_nums_sort = paste0("Zeile", sort(row_nums), sep="")  # Sortiert wieder mit zeilen zusammenstellen.
srt_wdr_zl
row_nums_sort
sort(row_names)
sort(row_names)
row_nums_sort = paste0("Zeile", sort(row_nums), sep="")  # Sortiert wieder mit zeilen zusammenstellen.
row_nums_sort
sort(row_names)
row_names = names(ja_anteil)
row_names_num = sub("Zeile", replace= "",  row_names)
row_nums = (as.numeric(row_names_num))
row_nums_sort = paste0("Zeile", sort(row_nums), sep="")  # Sortiert wieder mit zeilen zusammenstellen.
row_nums_sort
erw_srt_zl <- ja_anteil[row_nums_sort] # Sortiert die Anteile numerisch nach den zufallig vergebenen Zeilennamen
row_names = names(ja_anteil)
row_names_num = sub("Zeile", replace= "",  row_names)
row_nums = (as.numeric(row_names_num))
row_nums_sort = paste0("Zeile", sort(row_nums), sep="")  # Sortiert wieder mit zeilen zusammenstellen.
erw_srt_zl = ja_anteil[row_nums_sort]
ja_anteil_sort = ja_anteil[row_nums_sort]
ja_anteil_sort
sam
matr
matr[700000]
matr[700001]
len(matr)
matr[sam] = NA
matr
matr[matr == NA]
sum(matr[matr == NA])
matr == NA
length(matr == NA)
sam = sample(700000, 2000)
matr[sam] = NA
length(matr == NA)
length(is.na(matr))
matr
matr[::]
matr[:]
sam
matr[24832]
matr[24822]
ja_anteil_no_na <- rowMeans(matr, na.rm=TRUE)
ja_anteil_no_na
rm(list = ls())
load("nrw17.RDATA")
length(nrw17)
attributes(nrw17)
nrw17$inhalt[1]
ww = strsplit(nrw17$inhalt[1:10], " ")
ww = sapply(ww, function(w) w[!grepl("[^a-zA-Z]", w)])
sapply(ww, "[", 2)
ww2 = nrw17$inhalt[1:100]
ww2 = ww2[!nrw17$isretweet[1:100]]
ww2 = strsplit(ww2, " ")
ww2 = sapply(ww2, function(w) w[!grepl("[^a-zA-Z]", w)])
sapply(ww2, "[", 1)
retw = nrw17$inhalt[nrw17$isretweet]
retw = strsplit(retw, " ")
retw = sapply(retw, function(w) w[!grepl("[^a-zA-Z]", w)])
retw = sapply(retw, "[", 1)
retw = strsplit(retw, " ")
sum(retw == "RT")/length(retw)
sum(regexpr("@" ,nrw17$inhalt)>0)/length(nrw17$inhalt)
bool_ = regexpr("@", nrw17$inhalt) > 0
no_at = which(bool_ == FALSE)
num_at = sapply(gregexpr("@", nrw17$inhalt),length)
num_at[no_at] = 0
nrw17 = c(nrw17,list(Num_at=num_at))
table(num_at)
words_vec = unlist(strsplit(nrw17$inhalt," "))
words_vec
at_verw = unlist(strsplit(nrw17$inhalt[bool_], split=" "))
bool_at = grepl("@", at_verw)
words_at = at_verw[bool_at]
sorted_usr = sort(table(nrw17$name))
len = length(sorted_usr)
top_10 = rev(sorted_usr[(len-10):len])
top_10
tw_table = table(nrw17$name)
len = length(tw_table)
break_points = c(which(diff(rev(sort(tw_table))) < 0), X = len)
break_diff = c(break_points[1], diff(break_points))
names(break_diff) = rev(unique(sort(tw_table)))
rev(break_diff)
top_100 = rev(sort(table(nrw17$name)))[1:100]
rand_usr = sample(top_100 ,1, replace=FALSE)
num_ref = sum(grepl(paste0("@",names(rand_usr),separate= ""), nrw17$inhalt[bool_]))
num_ref
all_sgn =  unlist(strsplit(nrw17$inhalt, split=""))
table_ = table(all_sgn)
table_
ltrs = c(letters, LETTERS)
hauf_tab = table(all_sgn[grepl("[a-zA-Z]", all_sgn)])
hauf_tab
all_na = ifelse(grepl("[a-zA-Z]", all_sgn), all_sgn[grepl("[a-zA-Z]", all_sgn)] , "NA")
table_all_na = table(all_na)
table_all_na
times = nrw17$zeit
times_dot = sub(":",".", times)
times_vec =  unlist(times_dot)
times_num = as.numeric(times_vec)
hrs = round(times_num)
hrs_sep = paste(hrs, "00" , sep=".")
hrs_table = sort(table(hrs_sep))
hrs_table
chisq.test(hrs_table) # Nein, p-value ist viel kleiner als Signifikanzniveau, wir kÃ¶nnen die Nullhypothese nicht annehmen.
matr =  t(sapply(rep(2, 1000), sample, prob=c(0.3,0.7), replace=TRUE, size = 700))
matr[matr==2] = 0
sam = sample(1000)
ran_row = paste0("Zeile",sam)
rownames(matr) = ran_row
matr
ja_anteil = rowMeans(matr)
ja_anteil
sort(ja_anteil)
sort(ja_anteil)[25] == quantile(ja_anteil, probs=0.025)
sort(ja_anteil)[975] == quantile(ja_anteil, probs=0.975)
alpha = 0.05
n = 1000
sch = ja_anteil
q_n = qnorm(1 - (alpha/2))
sd = sqrt(sch*(1-sch))
untere_g = sch - q_n * sd/sqrt(n)
obere_g = sch + q_n * sd/sqrt(n)
conf_int = paste(untere_g,obere_g,sep = ",")
conf_int[975]
quantile(ja_anteil, probs=0.975)
conf_int[25]
quantile(ja_anteil, probs=0.025)
row_names = names(ja_anteil)
row_names_num = sub("Zeile", replace= "",  row_names)
row_nums = (as.numeric(row_names_num))
row_nums_sort = paste0("Zeile", sort(row_nums), sep="")  # Sortiert wieder mit zeilen zusammenstellen.
ja_anteil_sort = ja_anteil[row_nums_sort]
ja_anteil_sort
sam = sample(700000, 2000)
matr[sam] = NA
ja_anteil_no_na <- rowMeans(matr, na.rm=TRUE)
ja_anteil_no_na
ww = strsplit(nrw17$inhalt[1:10], " ")
ww = sapply(ww, function(w) w[!grepl("[^a-zA-Z]", w)])
sapply(ww, "[", 2)
objekte = load("neuwal.RDATA")
objekte = load("neuwal.RDATA")
objekte = load("neuwal.Rdata")
objekte = load("neuwal.RDATA")
objekte = load("neuwal.RDATA")
objekte
rm(list = ls())
objekte = load("neuwal.RDATA")
pwd
load("nrw17.RDATA")
length(nrw17)
attributes(nrw17)
nrw17$inhalt[1]
ww = strsplit(nrw17$inhalt[1:10], " ")
ww = sapply(ww, function(w) w[!grepl("[^a-zA-Z]", w)])
ww = strsplit(nrw17$inhalt[1:10], " ")
ww = sapply(ww, function(w) w[!grepl("[^a-zA-Z]", w)])
ww
sapply(ww, "[", 2)
ww
sapply(ww, "[", 2)
retw = nrw17$inhalt[nrw17$isretweet]
retw = strsplit(retw, " ")
retw = sapply(retw, function(w) w[!grepl("[^a-zA-Z]", w)])
retw = sapply(retw, "[", 1)
retw = strsplit(retw, " ")
sum(retw == "RT")/length(retw)
sum(regexpr("@" ,nrw17$inhalt)>0)/length(nrw17$inhalt)
bool_ = regexpr("@", nrw17$inhalt) > 0
no_at = which(bool_ == FALSE)
num_at = sapply(gregexpr("@", nrw17$inhalt),length)
num_at[no_at] = 0
nrw17 = c(nrw17,list(Num_at=num_at))
table(num_at)
num_at = sapply(gregexpr("@", nrw17$inhalt),length)
num_at
gregexpr("@", nrw17$inhalt)
bool_ = regexpr("@", nrw17$inhalt) > 0
no_at = which(bool_ == FALSE)
num_at = sapply(gregexpr("@", nrw17$inhalt),length)
gregexpr("@", nrw17$inhalt)
num_at[no_at] = 0
nrw17 = c(nrw17,list(Num_at=num_at))
table(num_at)
words_vec = unlist(strsplit(nrw17$inhalt," "))
words_vec
at_verw = unlist(strsplit(nrw17$inhalt[bool_], split=" "))
bool_at = grepl("@", at_verw)
words_at = at_verw[bool_at]
words_at
sorted_usr = sort(table(nrw17$name))
len = length(sorted_usr)
top_10 = rev(sorted_usr[(len-10):len])
top_10
tw_table = table(nrw17$name)
len = length(tw_table)
break_points = c(which(diff(rev(sort(tw_table))) < 0), X = len)
break_diff = c(break_points[1], diff(break_points))
names(break_diff) = rev(unique(sort(tw_table)))
rev(break_diff)
top_100 = rev(sort(table(nrw17$name)))[1:100]
rand_usr = sample(top_100 ,1, replace=FALSE)
num_ref = sum(grepl(paste0("@",names(rand_usr),separate= ""), nrw17$inhalt[bool_]))
num_ref
all_sgn =  unlist(strsplit(nrw17$inhalt, split=""))
table_ = table(all_sgn)
table_
ltrs = c(letters, LETTERS)
hauf_tab = table(all_sgn[grepl("[a-zA-Z]", all_sgn)])
hauf_tab
sam = sample(1000)
ran_row = paste0("Zeile",sam)
rownames(matr) = ran_row
matr
ja_anteil = rowMeans(matr)
ja_anteil
sort(ja_anteil)
sort(ja_anteil)[25] == quantile(ja_anteil, probs=0.025)
sort(ja_anteil)[975] == quantile(ja_anteil, probs=0.975)
alpha = 0.05
n = 1000
sch = ja_anteil
q_n = qnorm(1 - (alpha/2))
sd = sqrt(sch*(1-sch))
untere_g = sch - q_n * sd/sqrt(n)
obere_g = sch + q_n * sd/sqrt(n)
conf_int = paste(untere_g,obere_g,sep = ",")
conf_int[975]
quantile(ja_anteil, probs=0.975)
conf_int[25]
quantile(ja_anteil, probs=0.025)
row_names = names(ja_anteil)
row_names_num = sub("Zeile", replace= "",  row_names)
row_nums = (as.numeric(row_names_num))
row_nums_sort = paste0("Zeile", sort(row_nums), sep="")
ja_anteil_sort = ja_anteil[row_nums_sort]
ja_anteil_sort
sam = sample(700000, 2000)
matr[sam] = NA
ja_anteil_no_na <- rowMeans(matr, na.rm=TRUE)
ja_anteil_no_na
times = nrw17$zeit
times_dot = sub(":",".", times)
times_vec =  unlist(times_dot)
times_num = as.numeric(times_vec)
hrs = round(times_num)
hrs_sep = paste(hrs, "00" , sep=".")
hrs_table = sort(table(hrs_sep))
hrs_table
chisq.test(hrs_table) # Nein, p-value ist viel kleiner als Signifikanzniveau, wir kÃ¶nnen die Nullhypothese nicht annehmen.
times_dot = sub(":",".", times)
n
n
objekte = load("neuwal.RDATA")
objekte = load("neuwal.RDATA")
objekte
rm(list = ls())
objekte = load("neuwal.RDATA")
lens =c(length(monat), length(oevp), length(fpoe), length(spoe), length(neos), length(gruene), length(pilz), length(n))
min(length(monat) == lens) == 1
n
objekte = load("neuwal.RDATA")
objekte
objekte = load("neuwal.RDATA")
objekte
rm(list = ls())
objekte = load("neuwal.RDATA")
objekte = load("neuwal.RDATA")
objekte = load("neuwal.RDATA")
objekte
objekte = load("neuwal.RDATA")
objekte = load("neuwal.RDATA")
load("nrw17.RDATA")
length(nrw17)
attributes(nrw17)
nrw17$inhalt[1]
ww = strsplit(nrw17$inhalt[1:10], " ")
ww = sapply(ww, function(w) w[!grepl("[^a-zA-Z]", w)])
sapply(ww, "[", 2)
ww2 = nrw17$inhalt[1:100]
ww2 = ww2[!nrw17$isretweet[1:100]]
ww2 = strsplit(ww2, " ")
ww2 = sapply(ww2, function(w) w[!grepl("[^a-zA-Z]", w)])
sapply(ww2, "[", 1)
retw = nrw17$inhalt[nrw17$isretweet]
retw = strsplit(retw, " ")
retw = sapply(retw, function(w) w[!grepl("[^a-zA-Z]", w)])
retw = sapply(retw, "[", 1)
retw = strsplit(retw, " ")
sum(retw == "RT")/length(retw)
sum(regexpr("@" ,nrw17$inhalt)>0)/length(nrw17$inhalt)
bool_ = regexpr("@", nrw17$inhalt) > 0
no_at = which(bool_ == FALSE)
num_at = sapply(gregexpr("@", nrw17$inhalt),length)
gregexpr("@", nrw17$inhalt)
num_at[no_at] = 0
nrw17 = c(nrw17,list(Num_at=num_at))
table(num_at)
words_vec = unlist(strsplit(nrw17$inhalt," "))
words_vec
at_verw = unlist(strsplit(nrw17$inhalt[bool_], split=" "))
bool_at = grepl("@", at_verw)
words_at = at_verw[bool_at]
sorted_usr = sort(table(nrw17$name))
len = length(sorted_usr)
top_10 = rev(sorted_usr[(len-10):len])
top_10
tw_table = table(nrw17$name)
len = length(tw_table)
break_points = c(which(diff(rev(sort(tw_table))) < 0), X = len)
break_diff = c(break_points[1], diff(break_points))
names(break_diff) = rev(unique(sort(tw_table)))
rev(break_diff)
names(break_diff) = rev(unique(sort(tw_table)))
rev(break_diff)
tw_table = table(nrw17$name)
tw_table
sort(tw_table)
unique(sort(tw_table))
len = length(tw_table)
break_points = c(which(diff(rev(sort(tw_table))) < 0), X = len)
break_diff = c(break_points[1], diff(break_points))
names(break_diff) = rev(unique(sort(tw_table)))
rev(break_diff)
top_100 = rev(sort(table(nrw17$name)))[1:100]
rand_usr = sample(top_100 ,1, replace=FALSE)
num_ref = sum(grepl(paste0("@",names(rand_usr),separate= ""), nrw17$inhalt[bool_]))
num_ref
top_100 = rev(sort(table(nrw17$name)))[1:100]
rand_usr = sample(top_100 ,1, replace=FALSE)
num_ref = sum(grepl(paste0("@",names(rand_usr),separate= ""), nrw17$inhalt[bool_]))
num_ref
top_100 = rev(sort(table(nrw17$name)))[1:100]
rand_usr = sample(top_100 ,1, replace=FALSE)
num_ref = sum(grepl(paste0("@",names(rand_usr),separate= ""), nrw17$inhalt[bool_]))
num_ref
all_sgn =  unlist(strsplit(nrw17$inhalt, split=""))
table_ = table(all_sgn)
table_
ltrs = c(letters, LETTERS)
hauf_tab = table(all_sgn[grepl("[a-zA-Z]", all_sgn)])
hauf_tab = table(all_sgn[grepl("[a-zA-Z]", all_sgn)])
hauf_tab
all_na = ifelse(grepl("[a-zA-Z]", all_sgn), all_sgn[grepl("[a-zA-Z]", all_sgn)] , "NA")
grepl("[a-zA-Z]", all_sgn)
all_na = ifelse(grepl("[a-zA-Z]", all_sgn), all_sgn[grepl("[a-zA-Z]", all_sgn)] , "NA")
table_all_na = table(all_na)
table_all_na
times = nrw17$zeit
times_dot = sub(":",".", times)
times_vec =  unlist(times_dot)
times_num = as.numeric(times_vec)
hrs = round(times_num)
hrs_sep = paste(hrs, "00" , sep=".")
hrs_table = sort(table(hrs_sep))
hrs_table
chisq.test(hrs_table) # Nein, p-value ist viel kleiner als Signifikanzniveau, wir kÃ¶nnen die Nullhypothese nicht annehmen.
matr =  t(sapply(rep(2, 1000), sample, prob=c(0.3,0.7), replace=TRUE, size = 700))
matr =  t(sapply(rep(2, 1000), sample, prob=c(0.3,0.7), replace=TRUE, size = 700))
matr[matr==2] = 0
sam = sample(1000)
ran_row = paste0("Zeile",sam)
rownames(matr) = ran_row
matr
ja_anteil = rowMeans(matr)
ja_anteil = rowMeans(matr)
ja_anteil
sort(ja_anteil)
sort(ja_anteil)[25] == quantile(ja_anteil, probs=0.025)
sort(ja_anteil)[975] == quantile(ja_anteil, probs=0.975)
sort(ja_anteil)
sort(ja_anteil)[25] == quantile(ja_anteil, probs=0.025)
sort(ja_anteil)[975] == quantile(ja_anteil, probs=0.975)
ja_anteil = rowMeans(matr)
ja_anteil
sort(ja_anteil)
sort(ja_anteil)[25] == quantile(ja_anteil, probs=0.025)
sort(ja_anteil)[25] == quantile(ja_anteil, probs=0.025)
sort(ja_anteil)[975] == quantile(ja_anteil, probs=0.975)
sort(ja_anteil)[25]
quantile(ja_anteil, probs=0.025)
matr =  t(sapply(rep(2, 1000), sample, prob=c(0.3,0.7), replace=TRUE, size = 700))
matr[matr==2] = 0
sam = sample(1000)
ran_row = paste0("Zeile",sam)
rownames(matr) = ran_row
matr
ja_anteil = rowMeans(matr)
ja_anteil
sort(ja_anteil)
sort(ja_anteil)[25]
sort(ja_anteil)[25] == quantile(ja_anteil, probs=0.025)
sort(ja_anteil)[975] == quantile(ja_anteil, probs=0.975)
alpha = 0.05
n = 1000
sch = ja_anteil
q_n = qnorm(1 - (alpha/2))
sd = sqrt(sch*(1-sch))
untere_g = sch - q_n * sd/sqrt(n)
obere_g = sch + q_n * sd/sqrt(n)
conf_int = paste(untere_g,obere_g,sep = ",")
conf_int[975]
quantile(ja_anteil, probs=0.975)
conf_int[25]
quantile(ja_anteil, probs=0.025)
quantile(ja_anteil, probs=0.025)
conf_int[25]
alpha = 0.05
n = 1000
sch = ja_anteil
q_n = qnorm(1 - (alpha/2))
sd = sqrt(sch*(1-sch))
untere_g = sch - q_n * sd/sqrt(n)
obere_g = sch + q_n * sd/sqrt(n)
conf_int = paste(untere_g,obere_g,sep = ",")
conf_int[975]
quantile(ja_anteil, probs=0.975)
conf_int[25]
quantile(ja_anteil, probs=0.025)
row_names = names(ja_anteil)
row_names_num = sub("Zeile", replace= "",  row_names)
row_nums = (as.numeric(row_names_num))
row_nums_sort = paste0("Zeile", sort(row_nums), sep="")
ja_anteil_sort = ja_anteil[row_nums_sort]
ja_anteil_sort
sam = sample(700000, 2000)
matr[sam] = NA
ja_anteil_no_na <- rowMeans(matr, na.rm=TRUE)
ja_anteil_no_na
